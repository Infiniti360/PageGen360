import { z } from 'zod';

// Core POM Types
export interface Element {
  id: string;
  tagName: string;
  className?: string;
  elementId?: string;
  text?: string;
  href?: string;
  src?: string;
  type?: string;
  value?: string;
  placeholder?: string;
  title?: string;
  alt?: string;
  xpath?: string;
  cssSelector?: string;
  isInteractive: boolean;
  isVisible: boolean;
  children: Element[];
  attributes: Record<string, string>;
  position: {
    x: number;
    y: number;
    width: number;
    height: number;
  };
}

export interface POM {
  id: string;
  url: string;
  version: string;
  framework: string;
  language: string;
  elements: Element[];
  methods: POMMethod[];
  imports: string[];
  className: string;
  baseClass?: string;
  generatedCode?: string; // Code generated by CodeGenerator
  generatedAt: Date;
  metadata: POMMetadata;
}

export interface POMMethod {
  name: string;
  returnType: string;
  parameters: POMParameter[];
  body: string;
  description: string;
  elementId?: string;
  isGetter: boolean;
  isSetter: boolean;
  isAction: boolean;
  isAssertion: boolean; // NEW: For assertion methods
  supportsChaining: boolean; // NEW: For method chaining
  frameworkSpecific: boolean; // NEW: Framework-specific implementations
  methodType: 'getter' | 'setter' | 'action' | 'assertion' | 'utility' | 'validation'; // NEW: Method categorization
}

export interface POMParameter {
  name: string;
  type: string;
  defaultValue?: string;
  required: boolean;
}

export interface POMMetadata {
  pageTitle: string;
  pageDescription?: string;
  loginRequired: boolean;
  authenticationMethod?: string;
  browser: string;
  userAgent: string;
  viewport: {
    width: number;
    height: number;
  };
  timestamp: Date;
  llmEnhanced?: boolean;
  llmProvider?: string;
  llmModel?: string;
  mcpEnhanced?: boolean;
  mcpTools?: string[];
  mcpServerUrl?: string;
  industrialStandards?: Record<string, any>; // Add industrialStandards property
  enhanced?: boolean; // Add enhanced property
  qualityMetrics?: Record<string, any>; // Add qualityMetrics property
  statistics?: Record<string, any>; // Add statistics property
}

// Generation Options
export interface GenerationOptions {
  framework: 'selenium' | 'playwright' | 'cypress' | 'puppeteer' | 'testcafe';
  language: 'javascript' | 'typescript' | 'python' | 'java' | 'csharp';
  url?: string; // Add URL property for page type determination
  elements?: Element[]; // Add elements property for code generation
  includeTests?: boolean;
  includeComments?: boolean;
  includeWaitStrategies?: boolean;
  includeErrorHandling?: boolean;
  loginConfig?: LoginConfig;
  llmIntegration?: LLMConfig;
  mcpIntegration?: MCPConfig;
  browser?: BrowserConfig;
  versionManagement?: VersionConfig;
}

// Enhanced Generation Options
export interface EnhancedGenerationOptions extends GenerationOptions {
  includeMethodChaining?: boolean;
  includeComprehensiveAssertions?: boolean;
  includeUtilityMethods?: boolean;
  includeValidationMethods?: boolean;
  includeAccessibilityChecks?: boolean;
  includeResponsiveValidation?: boolean;
  baseClass?: string;
  customAssertions?: string[];
  customActions?: string[];
}

// Framework-specific configuration
export interface FrameworkConfig {
  baseClass: string;
  imports: string[];
  locatorPattern: 'selector' | 'locator' | 'element' | 'cypress';
  chainingReturnType: string;
  asyncSupport: boolean;
  assertionLibrary: string;
}

// Method templates for different frameworks
export interface MethodTemplate {
  cypress: string;
  playwright: string;
  selenium: string;
  puppeteer: string;
  python?: string;
  java?: string;
  csharp?: string;
}

// Authentication Types
export interface LoginConfig {
  type: 'oauth2' | 'saml' | 'basic' | 'token' | 'sso' | 'custom';
  credentials?: Credentials;
  config?: Record<string, any>;
  customScript?: string;
  loginUrl?: string;
  targetUrl?: string; // URL to navigate to after successful login
  selectors?: {
    usernameField?: string;
    passwordField?: string;
    submitButton?: string;
  };
  waitForLogin?: {
    type: 'url' | 'selector';
    value: string;
  };
}

export interface Credentials {
  username?: string;
  password?: string;
  token?: string;
  clientId?: string;
  clientSecret?: string;
  redirectUri?: string;
  apiKey?: string;
}

// LLM Integration Types
export interface LLMConfig {
  provider: 'openai' | 'claude' | 'custom';
  apiKey: string;
  model?: string;
  temperature?: number;
  maxTokens?: number;
  endpoint?: string;
  headers?: Record<string, string>;
}

// MCP Integration Types
export interface MCPConfig {
  serverUrl: string;
  credentials?: MCPCredentials;
  tools: string[];
  contextManagement?: boolean;
  aiConfig?: AIConfig;
  framework?: string; // Add framework property
  language?: string; // Add language property
}

// AI Configuration Types
export interface AIConfig {
  provider: 'openai' | 'claude' | 'custom';
  apiKey: string;
  model?: string;
  temperature?: number;
  maxTokens?: number;
  endpoint?: string;
  headers?: Record<string, string>;
}

export interface MCPCredentials {
  apiKey?: string;
  username?: string;
  password?: string;
  token?: string;
}

export interface MCPContext {
  id: string;
  url: string;
  elements: Element[];
  existingPOM?: POM;
  pageData: PageData;
  sessionData: SessionData;
  metadata: MCPMetadata;
}

export interface PageData {
  title: string;
  description?: string;
  keywords?: string[];
  canonicalUrl?: string;
  ogTags?: Record<string, string>;
  metaTags?: Record<string, string>;
}

export interface SessionData {
  cookies: Cookie[];
  localStorage: Record<string, string>;
  sessionStorage: Record<string, string>;
  headers: Record<string, string>;
}

export interface Cookie {
  name: string;
  value: string;
  domain?: string;
  path?: string;
  expires?: Date;
  httpOnly?: boolean;
  secure?: boolean;
  sameSite?: string;
}

export interface MCPMetadata {
  createdAt: Date;
  updatedAt: Date;
  version: string;
  tools: string[];
  contextSize: number;
}

// Browser Types
export interface BrowserConfig {
  name: 'chrome' | 'firefox' | 'safari' | 'edge';
  headless?: boolean;
  userAgent?: string;
  viewport?: {
    width: number;
    height: number;
  };
  args?: string[];
  timeout?: number;
}

// Version Management Types
export interface VersionConfig {
  autoUpdate?: boolean;
  backwardCompatibility?: boolean;
  forwardCompatibility?: boolean;
  migrationScripts?: boolean;
  versioningStrategy?: 'semantic' | 'timestamp' | 'incremental';
}

// Result Types
export interface POMResult {
  success: boolean;
  pom: POM;
  warnings: string[];
  errors: string[];
  metadata: ResultMetadata;
}

export interface UpdatedPOMResult {
  success: boolean;
  oldPOM: POM;
  newPOM: POM;
  changes: POMChanges;
  migrationScript: string | undefined;
  compatibility: CompatibilityReport;
  metadata: ResultMetadata;
}

export interface POMChanges {
  addedElements: Element[];
  removedElements: Element[];
  modifiedElements: ElementChange[];
  addedMethods: POMMethod[];
  removedMethods: POMMethod[];
  modifiedMethods: MethodChange[];
}

export interface ElementChange {
  element: Element;
  changes: {
    attribute?: string;
    oldValue?: string;
    newValue?: string;
  }[];
}

export interface MethodChange {
  method: POMMethod;
  changes: {
    parameter?: string;
    oldValue?: string;
    newValue?: string;
  }[];
}

export interface CompatibilityReport {
  backwardCompatible: boolean;
  forwardCompatible: boolean;
  breakingChanges: string[];
  migrationRequired: boolean;
  estimatedEffort: 'low' | 'medium' | 'high';
}

export interface ResultMetadata {
  generationTime: number;
  elementCount: number;
  methodCount: number;
  framework: string;
  language: string;
  browser: string;
  timestamp: Date;
}

// Zod Schemas for Validation
export const ElementSchema: any = z.object({
  id: z.string(),
  tagName: z.string(),
  className: z.string().optional(),
  elementId: z.string().optional(),
  text: z.string().optional(),
  href: z.string().optional(),
  src: z.string().optional(),
  type: z.string().optional(),
  value: z.string().optional(),
  placeholder: z.string().optional(),
  title: z.string().optional(),
  alt: z.string().optional(),
  xpath: z.string().optional(),
  cssSelector: z.string().optional(),
  isInteractive: z.boolean(),
  isVisible: z.boolean(),
  children: z.array(z.lazy(() => ElementSchema)),
  attributes: z.record(z.string()),
  position: z.object({
    x: z.number(),
    y: z.number(),
    width: z.number(),
    height: z.number(),
  }),
});

export const POMMethodSchema = z.object({
  name: z.string(),
  returnType: z.string(),
  parameters: z.array(z.object({
    name: z.string(),
    type: z.string(),
    defaultValue: z.string().optional(),
    required: z.boolean(),
  })),
  body: z.string(),
  description: z.string(),
  elementId: z.string().optional(),
  isGetter: z.boolean(),
  isSetter: z.boolean(),
  isAction: z.boolean(),
});

export const POMSchema = z.object({
  id: z.string(),
  url: z.string(),
  version: z.string(),
  framework: z.string(),
  language: z.string(),
  elements: z.array(ElementSchema),
  methods: z.array(POMMethodSchema),
  imports: z.array(z.string()),
  className: z.string(),
  baseClass: z.string().optional(),
  generatedAt: z.date(),
  metadata: z.object({
    pageTitle: z.string(),
    pageDescription: z.string().optional(),
    loginRequired: z.boolean(),
    authenticationMethod: z.string().optional(),
    browser: z.string(),
    userAgent: z.string(),
    viewport: z.object({
      width: z.number(),
      height: z.number(),
    }),
    timestamp: z.date(),
  }),
});

export const GenerationOptionsSchema = z.object({
  framework: z.enum(['selenium', 'playwright', 'cypress', 'puppeteer', 'testcafe']),
  language: z.enum(['javascript', 'typescript', 'python', 'java', 'csharp']),
  url: z.string().optional(),
  elements: z.array(ElementSchema).optional(),
  includeTests: z.boolean().optional(),
  includeComments: z.boolean().optional(),
  includeWaitStrategies: z.boolean().optional(),
  includeErrorHandling: z.boolean().optional(),
  loginConfig: z.object({
    type: z.enum(['oauth2', 'saml', 'basic', 'token', 'sso', 'custom']),
    credentials: z.object({
      username: z.string().optional(),
      password: z.string().optional(),
      token: z.string().optional(),
      clientId: z.string().optional(),
      clientSecret: z.string().optional(),
      redirectUri: z.string().optional(),
      apiKey: z.string().optional(),
    }).optional(),
    config: z.record(z.any()).optional(),
    customScript: z.string().optional(),
    loginUrl: z.string().optional(),
    selectors: z.object({
      usernameField: z.string().optional(),
      passwordField: z.string().optional(),
      submitButton: z.string().optional(),
    }).optional(),
    waitForLogin: z.object({
      type: z.enum(['url', 'selector']),
      value: z.string(),
    }).optional(),
  }).optional(),
  llmIntegration: z.object({
    provider: z.enum(['openai', 'claude', 'custom']),
    apiKey: z.string(),
    model: z.string().optional(),
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    endpoint: z.string().optional(),
    headers: z.record(z.string()).optional(),
  }).optional(),
  mcpIntegration: z.object({
    serverUrl: z.string(),
    credentials: z.object({
      apiKey: z.string().optional(),
      username: z.string().optional(),
      password: z.string().optional(),
      token: z.string().optional(),
    }).optional(),
    tools: z.array(z.string()),
    contextManagement: z.boolean().optional(),
    framework: z.string().optional(),
    language: z.string().optional(),
  }).optional(),
  browser: z.object({
    name: z.enum(['chrome', 'firefox', 'safari', 'edge']),
    headless: z.boolean().optional(),
    userAgent: z.string().optional(),
    viewport: z.object({
      width: z.number(),
      height: z.number(),
    }).optional(),
    args: z.array(z.string()).optional(),
    timeout: z.number().optional(),
  }).optional(),
  versionManagement: z.object({
    autoUpdate: z.boolean().optional(),
    backwardCompatibility: z.boolean().optional(),
    forwardCompatibility: z.boolean().optional(),
    migrationScripts: z.boolean().optional(),
    versioningStrategy: z.enum(['semantic', 'timestamp', 'incremental']).optional(),
  }).optional(),
}); 